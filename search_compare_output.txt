--------------------------------
Start Of Program
--------------------------------

Enter a natural number, N, which is no larger than 1000 (to represent the total number of elements to store in the array named A): 

The value which was entered for N is 9.

Enter a nonnegative integer, T, which is no larger than 1000 (to represent the total number of states each element of A can represent exactly one of per instance): 

The value which was entered for T is 3.

--------------------------------

ARRAY A: 

A[0] := 2. // The memory address of A[0] is 0x5caee6566cc0.

A[1] := 0. // The memory address of A[1] is 0x5caee6566cc4.

A[2] := 1. // The memory address of A[2] is 0x5caee6566cc8.

A[3] := 2. // The memory address of A[3] is 0x5caee6566ccc.

A[4] := 0. // The memory address of A[4] is 0x5caee6566cd0.

A[5] := 2. // The memory address of A[5] is 0x5caee6566cd4.

A[6] := 1. // The memory address of A[6] is 0x5caee6566cd8.

A[7] := 0. // The memory address of A[7] is 0x5caee6566cdc.

A[8] := 2. // The memory address of A[8] is 0x5caee6566ce0.

--------------------------------

Enter a nonnegative integer value, x, which is no larger than 1000 to search for in the array named A: 

The value which was entered for x is 5.

--------------------------------

SEARCH ALGORITHMS:

0: LINEAR_SEARCH
1: BINARY_SEARCH
2: TERNARY_SEARCH
3: FIBONACCI_SEARCH
4: EXPONENTIAL_SEARCH
5: JUMP_SEARCH

Enter either 0, 1, 2, 3, 4, or 5 to store in the variable named c and which represents one of the above search algorithm choices to implement (to return the first instance of x in A and to determine how long that takes in milliseconds): 

The value which was entered for c is 7.

WARNING: c was reset to 0 because the user input value for c was out of range.

--------------------------------
End Of Program
--------------------------------