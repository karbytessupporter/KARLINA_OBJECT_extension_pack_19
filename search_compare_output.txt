--------------------------------
Start Of Program
--------------------------------

Enter a natural number, N, which is no larger than 1000 (to represent the total number of elements to store in the array named A): 

The value which was entered for N is 10.

Enter a nonnegative integer, T, which is no larger than 1000 (to represent the total number of states each element of A can represent exactly one of per instance): 

The value which was entered for T is 10.

--------------------------------

ARRAY A: 

A[0] := 5. // The memory address of A[0] is 0x5e47fae2dcc0.

A[1] := 8. // The memory address of A[1] is 0x5e47fae2dcc4.

A[2] := 8. // The memory address of A[2] is 0x5e47fae2dcc8.

A[3] := 4. // The memory address of A[3] is 0x5e47fae2dccc.

A[4] := 7. // The memory address of A[4] is 0x5e47fae2dcd0.

A[5] := 4. // The memory address of A[5] is 0x5e47fae2dcd4.

A[6] := 7. // The memory address of A[6] is 0x5e47fae2dcd8.

A[7] := 4. // The memory address of A[7] is 0x5e47fae2dcdc.

A[8] := 1. // The memory address of A[8] is 0x5e47fae2dce0.

A[9] := 6. // The memory address of A[9] is 0x5e47fae2dce4.

--------------------------------

Enter a nonnegative integer value, x, which is no larger than 1000 to search for in the array named A: 

The value which was entered for x is 10.

--------------------------------

SEARCH ALGORITHMS:

0: LINEAR_SEARCH
1: BINARY_SEARCH
2: TERNARY_SEARCH
3: FIBONACCI_SEARCH
4: EXPONENTIAL_SEARCH
5: JUMP_SEARCH

Enter either 0, 1, 2, 3, 4, or 5 to store in the variable named c and which represents one of the above search algorithm choices to implement (to return the first instance of x in A and to determine how long that takes in milliseconds): 

The value which was entered for c is 10.

WARNING: c was reset to 0 because the user input value for c was out of range.

--------------------------------

Using LINEAR_SEARCH to search for the value 10 in the array of 10 randomly-ordered int-type values named A...

--------------------------------
End Of Program
--------------------------------